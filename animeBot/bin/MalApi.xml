<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MalApi</name>
    </assembly>
    <members>
        <member name="T:MalApi.AnimeListCache">
            <summary>
            Thread-safe cache with an optional expiration time. If the expiration time is null, anime lists are cached for the lifetime of
            the object. Expired cache entries are only actually removed when a new anime list is inserted into the cache. Cache expiration
            measurement is susceptible to changes to the system clock.
            </summary>
        </member>
        <member name="T:MalApi.CachingMyAnimeListApi">
            <summary>
            This class is thread-safe if the underlying API is. If the expiration time is null, anime lists are cached for the lifetime of
            the object. Expired cache entries are only actually removed when a new anime list is inserted into the cache. Cache expiration
            measurement is susceptible to changes to the system clock.
            
            This class only caches user anime lists from GetAnimeListForUser(). Other functions are not cached.
            </summary>
        </member>
        <member name="M:MalApi.IMyAnimeListApi.GetAnimeListForUser(System.String)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
            <exception cref="T:MalApi.MalUserNotFoundException"></exception>
            <exception cref="T:MalApi.MalApiException"></exception>
        </member>
        <member name="M:MalApi.IMyAnimeListApi.GetAnimeDetails(System.Int32)">
            <summary>
            Gets information from an anime's "details" page.
            </summary>
            <param name="animeId"></param>
            <returns></returns>
        </member>
        <member name="P:MalApi.MalAnimeInfoFromUserLookup.Type">
            <summary>
            Could be something other than the enumerated values if MAL adds new types!
            </summary>
        </member>
        <member name="P:MalApi.MalAnimeInfoFromUserLookup.NumEpisodes">
            <summary>
            Could be 0 for anime that hasn't aired yet or less than the planned number of episodes for a series currently airing.
            </summary>
        </member>
        <member name="T:MalApi.MalAnimeNotFoundException">
            <summary>
            Indicates that the anime that was searched for does not exist.
            </summary>
        </member>
        <member name="T:MalApi.MalApiException">
            <summary>
            Generic exception for errors 
            </summary>
        </member>
        <member name="F:MalApi.MalAnimeType.Unknown">
            <summary>
            The type has not been entered in MAL's database yet.
            </summary>
        </member>
        <member name="T:MalApi.MalApiRequestException">
            <summary>
            Thrown when there is an error communicating with MAL.
            </summary>
        </member>
        <member name="M:MalApi.MalAppInfoXml.Parse(System.IO.TextReader)">
            <summary>
            Parses XML obtained from malappinfo.php. The XML is sanitized to account for MAL's invalid XML if, for example,
            a user has a &amp; character in their tags.
            </summary>
            <param name="xmlTextReader"></param>
            <returns></returns>
            <exception cref="T:MalApi.MalUserNotFoundException"></exception>
            <exception cref="T:MalApi.MalApiException"></exception>
        </member>
        <member name="M:MalApi.MalAppInfoXml.SanitizeAnimeListXml(System.IO.TextReader)">
            <summary>
            Sanitizes anime list XML which is not always well-formed. If a user uses &amp; characters in their tags,
            they will not be escaped in the XML.
            </summary>
            <param name="xmlTextReader"></param>
            <returns></returns>
        </member>
        <member name="M:MalApi.MalAppInfoXml.Parse(System.Xml.Linq.XDocument)">
            <summary>
            Parses XML obtained from malappinfo.php.
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="T:MalApi.MyAnimeListApi">
            <summary>
            Class for accessing myanimelist.net. Methods are thread-safe. Properties are not.
            </summary>
        </member>
        <member name="M:MalApi.MyAnimeListApi.GetAnimeListForUser(System.String)">
            <summary>
            
            </summary>
            <param name="user"></param>
            <returns></returns>
            <exception cref="T:MalApi.MalUserNotFoundException"></exception>
            <exception cref="T:MalApi.MalApiException"></exception>
        </member>
        <member name="M:MalApi.MyAnimeListApi.GetRecentOnlineUsers">
            <summary>
            Gets a list of users that have been on MAL recently. This scrapes the HTML on the recent users page and therefore
            can break if MAL changes the HTML on that page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MalApi.MyAnimeListApi.GetAnimeDetails(System.Int32)">
            <summary>
            Gets information from an anime's "details" page. This method uses HTML scraping and so may break if MAL changes the HTML.
            </summary>
            <param name="animeId"></param>
            <returns></returns>
        </member>
        <member name="P:MalApi.MyAnimeListApi.UserAgent">
            <summary>
            What to set the user agent http header to in API requests. Null to use the default .NET user agent.
            </summary>
        </member>
        <member name="P:MalApi.MyAnimeListApi.TimeoutInMs">
            <summary>
            Timeout in milliseconds for requests to MAL. Defaults to 15000 (15s).
            </summary>
        </member>
        <member name="P:MalApi.MalUserLookupResults.CanonicalUserName">
            <summary>
            The user name as it appears in MAL. This might differ in capitalization from the username that was searched for.
            </summary>
        </member>
        <member name="T:MalApi.MalUserNotFoundException">
            <summary>
            Indicates that the user that was searched for does not exist.
            </summary>
        </member>
        <member name="T:MalApi.RateLimitingMyAnimeListApi">
            <summary>
            Limits MAL requests by waiting a given time period betwen each request.
            The time is measured from before one request is made to before the next request is made.
            You might use this to be nice to MAL and avoid making requests as fast as possible.
            This class is thread-safe if the underlying API is.
            </summary>
        </member>
        <member name="T:MalApi.RetryOnFailureMyAnimeListApi">
            <summary>
            Retries failed requests after waiting for a short period. After a certain number of failures, it gives up and propagates the
            thrown exception.
            </summary>
        </member>
        <member name="T:MalApi.UncertainDate">
            <summary>
            Date where the year, month, and day can be unknown or not specified. A year of 2005, month of 7, and null day would indicate
            July 2005.
            </summary>
        </member>
        <member name="M:MalApi.UncertainDate.FromMalDateString(System.String)">
            <summary>
            Creates an UncertainDate from the format MAL uses in its XML, YYYY-MM-DD with 00 or 0000 indicating an unknown.
            2005-07-00 would indicate July 2005.
            </summary>
            <param name="malDateString"></param>
            <returns></returns>
        </member>
    </members>
</doc>
